name: Windows Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: windows-latest
    permissions:
      contents: write  # Need write permission to create releases
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Get version from tag or generate
      id: version
      shell: pwsh
      run: |
        if ($env:GITHUB_REF -match 'refs/tags/v(.+)') {
          $version = $matches[1]
        } else {
          $version = "1.0.$env:GITHUB_RUN_NUMBER"
        }
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build and Publish
      run: dotnet publish src/DbcServer.Api/DbcServer.Api.csproj -c Release -r win-x64 --self-contained -p:PublishSingleFile=true -p:Version=${{ steps.version.outputs.VERSION }} -o ./publish
    
    - name: Copy config example
      run: Copy-Item -Path "config.example.json" -Destination "./publish/config.example.json"
    
    - name: Download Squirrel tools
      shell: pwsh
      run: |
        # Download Squirrel.Windows NuGet package
        nuget install Squirrel.Windows -Version 2.0.1 -OutputDirectory ./packages
        
        # Copy Squirrel.exe to tools directory
        New-Item -ItemType Directory -Force -Path ./squirrel-tools
        Copy-Item -Path "./packages/Squirrel.Windows.2.0.1/tools/*" -Destination "./squirrel-tools/" -Recurse
        
        # Add to PATH
        echo "$PWD\squirrel-tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
    - name: Create NuGet package
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        
        # Create nuspec file
        @"
        <?xml version="1.0"?>
        <package>
          <metadata>
            <id>DbcServer</id>
            <version>$version</version>
            <title>DBC Server</title>
            <authors>Vasile Buza</authors>
            <description>Cross-platform DBF file API server with Windows auto-update support</description>
            <requireLicenseAcceptance>false</requireLicenseAcceptance>
            <iconUrl>https://raw.githubusercontent.com/hiscore-ro/dbc-server/main/icon.png</iconUrl>
          </metadata>
          <files>
            <file src="publish\**\*.*" target="lib\net45\" />
          </files>
        </package>
        "@ | Out-File -FilePath DbcServer.nuspec -Encoding UTF8
        
        # Create the nupkg
        nuget pack DbcServer.nuspec -Version $version -OutputDirectory ./nupkg
    
    - name: Create Squirrel installer
      shell: pwsh
      run: |
        $version = "${{ steps.version.outputs.VERSION }}"
        
        # Create Releases directory
        New-Item -ItemType Directory -Force -Path ./Releases
        
        # List squirrel tools to verify
        Write-Host "Squirrel tools contents:"
        Get-ChildItem -Path "./squirrel-tools" -Recurse | ForEach-Object { Write-Host $_.FullName }
        
        # Run Squirrel.exe to create installer
        & "./squirrel-tools/Squirrel.exe" --releasify "./nupkg/DbcServer.$version.nupkg" --releaseDir ./Releases --no-msi
        
        # List Releases directory contents
        Write-Host "Releases directory contents:"
        Get-ChildItem -Path "./Releases" -Recurse | ForEach-Object { Write-Host $_.FullName }
    
    - name: Check release files
      if: startsWith(github.ref, 'refs/tags/')
      shell: pwsh
      run: |
        # Check what files were actually created
        if (Test-Path "./Releases/Setup.exe") {
          Write-Host "✓ Setup.exe found"
        } else {
          Write-Host "✗ Setup.exe NOT found"
        }
        
        if (Test-Path "./Releases/RELEASES") {
          Write-Host "✓ RELEASES found"
        } else {
          Write-Host "✗ RELEASES NOT found"
        }
        
        Write-Host "All files in Releases:"
        Get-ChildItem "./Releases" | ForEach-Object { Write-Host "  - $($_.Name)" }
    
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./Releases/*
        body: |
          ## DbcServer v${{ steps.version.outputs.VERSION }}
          
          ### Installation
          - Download and run `Setup.exe`
          - The application will auto-update when new versions are available
          
          ### Configuration
          Edit `config.json` in the installation directory to configure:
          - DBF file path
          - Server URL and port
          - Auto-update settings
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Upload artifacts
      if: "!startsWith(github.ref, 'refs/tags/')"
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: |
          ./Releases/Setup.exe
          ./Releases/*.nupkg
          ./Releases/RELEASES
        retention-days: 30