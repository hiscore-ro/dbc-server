name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Format check (info only)
      run: dotnet format --verify-no-changes --verbosity diagnostic || true
      continue-on-error: true

    - name: Build solution
      run: dotnet build --configuration Release --no-restore /p:TreatWarningsAsErrors=false

    - name: Run tests
      run: dotnet test --configuration Release --no-build --verbosity normal

    - name: Test API startup (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Start the server in background
        dotnet run --project src/DbcServer.Api --no-build --configuration Release &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Test if server is responding
        curl -f http://localhost:3000/api/stock?pageSize=1 || exit 1
        
        # Kill the server
        kill $SERVER_PID

    - name: Test API startup (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Start the server in background
        $process = Start-Process -FilePath "dotnet" -ArgumentList "run", "--project", "src/DbcServer.Api", "--no-build", "--configuration", "Release" -PassThru
        
        # Wait for server to start
        Start-Sleep -Seconds 10
        
        # Test if server is responding
        try {
          $response = Invoke-WebRequest -Uri "http://localhost:3000/api/stock?pageSize=1" -UseBasicParsing
          if ($response.StatusCode -ne 200) {
            throw "Server not responding correctly"
          }
        } finally {
          # Kill the server
          Stop-Process -Id $process.Id -Force
        }

  publish-windows:
    name: Publish Windows Binaries
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Publish Windows x64
      run: dotnet publish src/DbcServer.Api/DbcServer.Api.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o ./publish/win-x64

    - name: Copy config example
      run: Copy-Item -Path "config.example.json" -Destination "./publish/win-x64/config.example.json"

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: dbc-server-win-x64
        path: ./publish/win-x64/
        retention-days: 30